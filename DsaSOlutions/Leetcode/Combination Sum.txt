class Solution {
public:
    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& result, vector<int>& combination, int start) {
        if (target == 0) {
            result.push_back(combination);
            return;
        }
        
        for (int i = start; i < candidates.size(); ++i) {
            if (candidates[i] > target) continue; // Skip if the candidate is greater than the remaining target
            
            combination.push_back(candidates[i]);
            backtrack(candidates, target - candidates[i], result, combination, i); // Not i + 1 because we can reuse same elements
            combination.pop_back(); // Undo the choice
        }
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> combination;
        sort(candidates.begin(), candidates.end()); // Optional: Sorting to improve efficiency by early stopping
        backtrack(candidates, target, result, combination, 0);
        return result;
    }
};
