
class Solution {
public:
    int countPairs(TreeNode* root, int distance) {
        int result = 0;
        dfs(root, distance, result);
        return result;
    }
    
private:
    vector<int> dfs(TreeNode* node, int distance, int& result) {
        if (!node) return {};
        
        // If the node is a leaf, return a vector with one element 1 (distance to itself)
        if (!node->left && !node->right) return {1};
        
        // Get the distances from the left and right subtrees
        vector<int> leftDistances = dfs(node->left, distance, result);
        vector<int> rightDistances = dfs(node->right, distance, result);
        
        // Count pairs where the sum of distances is <= distance
        for (int lDist : leftDistances) {
            for (int rDist : rightDistances) {
                if (lDist + rDist <= distance) {
                    result++;
                }
            }
        }
        
        // Collect the distances for the current node's subtree
        vector<int> currentDistances;
        for (int lDist : leftDistances) {
            if (lDist + 1 < distance) {
                currentDistances.push_back(lDist + 1);
            }
        }
        for (int rDist : rightDistances) {
            if (rDist + 1 < distance) {
                currentDistances.push_back(rDist + 1);
            }
        }
        
        return currentDistances;
    }
};
