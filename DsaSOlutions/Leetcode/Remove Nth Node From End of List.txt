/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode dummy(0);
        dummy.next = head;

        ListNode* fast = &dummy;
        ListNode* slow = &dummy;

        // Move the fast pointer forward by n nodes
        for (int i = 0; i <= n; ++i) {
            fast = fast->next;
        }

        // Move both fast and slow pointers forward until the fast pointer reaches the end of the list
        while (fast != nullptr) {
            fast = fast->next;
            slow = slow->next;
        }

        // Remove the nth node from the end by updating the next pointer of the node pointed to by slow
        slow->next = slow->next->next;

        return dummy.next;
    }
};
