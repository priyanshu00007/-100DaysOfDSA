class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        
        if (m > n) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int left = 0, right = m;
        int max_left_nums1, max_left_nums2, min_right_nums1, min_right_nums2;
        
        while (left <= right) {
            int cut1 = left + (right - left) / 2;
            int cut2 = (m + n + 1) / 2 - cut1;
            
            max_left_nums1 = (cut1 == 0) ? INT_MIN : nums1[cut1 - 1];
            min_right_nums1 = (cut1 == m) ? INT_MAX : nums1[cut1];
            
            max_left_nums2 = (cut2 == 0) ? INT_MIN : nums2[cut2 - 1];
            min_right_nums2 = (cut2 == n) ? INT_MAX : nums2[cut2];
            
            if (max_left_nums1 <= min_right_nums2 && max_left_nums2 <= min_right_nums1) {
               
                if ((m + n) % 2 == 0) {
                    return (max(max_left_nums1, max_left_nums2) + min(min_right_nums1, min_right_nums2)) / 2.0;
                } else {
                    return max(max_left_nums1, max_left_nums2);
                }
            } else if (max_left_nums1 > min_right_nums2) {
                right = cut1 - 1;
            } else {
                left = cut1 + 1;
            }
        }
        
        throw invalid_argument("Input arrays are not sorted!");
    }
};
