#include <unordered_map>
#include <algorithm>

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        int maxLength = 0;
        unordered_map<char, int> charIndexMap;
        int left = 0;
        
        for (int right = 0; right < n; right++) {
            if (charIndexMap.find(s[right]) != charIndexMap.end()) {
                // If the character is already in the map, update the left pointer to the next position after the last occurrence of this character
                left = max(left, charIndexMap[s[right]] + 1);
            }
            // Update the index of the current character
            charIndexMap[s[right]] = right;
            // Update the maximum length
            maxLength = max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
};
